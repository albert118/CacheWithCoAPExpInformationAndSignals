
import logging

from .coaplrucache import CoapLRUCache
from .coaplfucache import CoapLFUCache
from coapthon import defines

__author__ = "Emilio Vallati"
__author__ = "Albert Ferguson"

logger = logging.getLogger(__name__)

class CoapCache:
    def __init__(self, mode, max_dim, cache=defines.CACHE_LFU):
        """
        Initialises a CoapCache mechanism of choice. Defaults to LRU caching.
        
        This __init__ implements the relevent CoAP cache_type, which in turn implements the Cache object.
        This class exposes interfaces to the public methods of CoapCaching mechanisms.

        :param max_dim: max number of elements in the cache.
        :param mode: used to differentiate between a cache used in a forward-proxy or in a reverse-proxy.
        :param cache: used to set the caching mechanism. Default is LRU caching. Options available listed in defines.
        """

        if cache is None or defines.CACHE_LRU: # LRU Caching OR default case.
            self.cache = CoapLRUCache(mode, max_dim)

        elif cache is (defines.CACHE_LFU):     # LFU Caching case.
            self.cache = CoapLFUCache(mode, max_dim)

        else:                                  # Catch if API call is to a non-existent cache.
            raise NotImplementedError

    def update(self, key, element):
        """
        Interface: Calls implemented cache's update function.

        :param key: key for new element.
        :param element: element to update the cache with.
        """

        if self.cache is not None: # Catch if API call is to a non-existent cache.
            raise NotImplementedError

        else:
            self.cache.update(key, element)

    def get(self, key):
        """
        Interface: Calls implemented cache's get function.

        :param key: key for new element.
        :return: associated element of the given key, if it exists.
        """

        if self.cache is not None: # Catch if API call is to a non-existent cache.
            raise NotImplementedError
        
        else:  
            return self.cache.get(key)

    def is_full(self):
        """
        Interface: Calls implemented cache's is_full function.

        :return: bool, True if Cache implemented is full. False otherwise.
        """

        if self.cache is not None: # Catch if API call is to a non-existent cache.
            raise NotImplementedError
        
        else:  
            return self.cache.is_full()

    def is_empty(self):
        """
        Interface: Calls implemented cache's is_empty function.

        :return: bool, True if Cache implemented is empty. False otherwise.
        """
        
        if self.cache is not None: # Catch if API call is to a non-existent cache.
            raise NotImplementedError
 
        else:  
            return self.cache.is_empty()


        return False

    def debug_print(self):
        """
        Interface: Calls the implemented cache object's debug printout.

        :return: debug printout.
        """
        if self.cache is not None: # Catch if API call is to a non-existent cache.
            raise NotImplementedError

        else: 
            return self.cache.debug_print()
