import logging

from cachetools import LFUCache

from .cache import Cache

__author__ = "Emilio Vallati"
__author__ = "Albert Ferguson"

logger = logging.getLogger(__name__)

class CoapLFUCache(Cache):
    def __init__(self, mode, max_dim):
        """
        Initialise an LFU cache for the Coap.

        :param max_dim: max number of elements in the cache
        :param mode: used to differentiate between a cache used in a forward-proxy or in a reverse-proxy
        """

        Cache.__init__(self, mode, max_dim)
        self.cache = LFUCache(maxsize=max_dim)

    def __str__(self):
        msg = []
        for e in list(self.cache.values()):
            msg.append(str(e))
        return ("Cache Size: {sz}\n" + "\n".join(msg))

    def debug_print(self):
        """
        :return: a debug printout for the current cache.
        """
        return ("size = %s\n%s" % (
            self.cache.currsize,
            '\n'.join([
                (   "element.max age %s\n"\
                    "element.uri %s\n"\
                    "element.freshness %s"  ) % (
                        element.max_age,
                        element.uri,
                        element.freshness )
                for key, element
                in list(self.cache.items())
            ])))
